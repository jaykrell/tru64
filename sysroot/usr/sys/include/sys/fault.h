/*
 * *****************************************************************
 * *                                                               *
 * *   Copyright 2002 Compaq Information Technologies Group, L.P.  *
 * *                                                               *
 * *   The software contained on this media  is  proprietary  to   *
 * *   and  embodies  the  confidential  technology  of  Compaq    *
 * *   Computer Corporation.  Possession, use,  duplication  or    *
 * *   dissemination of the software and media is authorized only  *
 * *   pursuant to a valid written license from Compaq Computer    *
 * *   Corporation.                                                *
 * *                                                               *
 * *   RESTRICTED RIGHTS LEGEND   Use, duplication, or disclosure  *
 * *   by the U.S. Government is subject to restrictions  as  set  *
 * *   forth in Subparagraph (c)(1)(ii)  of  DFARS  252.227-7013,  *
 * *   or  in  FAR 52.227-19, as applicable.                       *
 * *                                                               *
 * *****************************************************************
 */
/*
 * HISTORY
 */
/*
 * @(#)$RCSfile: fault.h,v $ $Revision: 1.1.6.2 $ (DEC) $Date: 1995/07/28 14:00:35 $
 */

#ifndef	_SYS_FAULT_H_
#define	_SYS_FAULT_H_

#ifdef mips

#include	<machine/cpu.h>

#define	FLTILL		(EXC_II)		/* illegal instruction */
#define	FLTBPT		(EXC_BREAK)		/* breakpoint */
#define	FLTIOVF		(EXC_OV)		/* overflow */
#define	FLTIZDIV	(EXC_BREAK)		/* n/0 handled via breakpoint*/
#define	FLTPAGE		(EXC_RMISS | EXC_WMISS)	/* read or write TLB miss */

/* #define	FLTPRIV		not supported by MIPS architecture */
/* #define	FLTTRACE	not supported by MIPS architecture */
/* #define	FLTACCESS	not supported by MIPS architecture */
/* #define	FLTBOUNDS	not supported by MIPS architecture */
/* #define	FLTFPE		not supported by MIPS architecture */
/* #define	FLTSTACK	not supported by MIPS architecture */

#endif /* mips */

#ifdef __alpha

#include	<machine/trap.h>

/*
 * A few notes on alpha faults
 * 1. FLTARITH included all arithmetic exception generated by an instruction.
 *	There is no integer divide instruction in alpha. It is simulated
 *	with a macro. When integer divide by zero occurs, FLTGENT is usually
 *	generated. However, FLTGENT can happen to other cases, too.
 * 2. It currently can't distinguish a bad memory access caused by an attempt
 *	to grow a stack, or to access to a bad address. When either happens,
 *	FLTBOUNDS will be generated.
 * 3. FLTOPDEC includes any bad instruction faults including illegal and
 *	privileged instructions
 */

#define FLTARITH	T_ARITH		/* Any arithmetic exception */
#define FLTFPE		FLTARITH	/* floating point exception */
#define FLTIOVF		FLTARITH	/* integer overflow exception */
#define FLTBOUNDS	(T_MMANG+T_MMANG_TNV)	/* invalid memory access */
#define FLTACCESS	(T_MMANG+T_MMANG_ACV)	/* memory access violation */
#define FLTPAGE		(T_MMANG+T_MMANG_FOR)	/* recoverable page fault */
#define FLTSTACK	FLTBOUNDS		/* unrecoverable stack fault */
#define FLTALIGN	T_ALIGN		/* unaligned memory access */
#define FLTBPT		(T_IFAULT+T_IFAULT_BPT)	/* break point trap */
#define FLTTRACE	FLTBPT			/* trace trap */
#define FLTBUGCK	(T_IFAULT+T_IFAULT_BUGCK)	/* bugchk trap */
#define FLTGENT		(T_IFAULT+T_IFAULT_GENT)	/* sofware trap */
#define FLTIZDIV	FLTGENT				/* integer 0 divide */
#define FLTOPDEC	(T_IFAULT+T_IFAULT_OPDEC)	/* bad instruction */
#define FLTPRIV		FLTOPDEC	/* privileged instruction */
#define FLTILL		FLTOPDEC	/* illegal instruction */

#endif /* __alpha */

#endif	/* _SYS_FAULT_H_ */
